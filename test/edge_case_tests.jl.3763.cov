        1 @testset "Edge Case Tests" begin
        1     @testset "Minimum configuration" begin
        -         # Test with minimum possible configuration: 0 node bits, 22 sequence bits
        2         generator = SnowflakeIdGenerator(0, 22, 0, 0, EpochClock())
        -         
        1         id = next_id(generator)
        1         @test id > 0
        1         @test SnowflakeId.node_id(generator, id) == 0
        1         @test SnowflakeId.max_node_id(generator) == 0
        1         @test SnowflakeId.max_sequence(generator) == 2^22 - 1
        -     end
        -     
        0     @testset "Maximum configuration" begin
        -         # Test with maximum possible configuration: 22 node bits, 0 sequence bits
        2         generator = SnowflakeIdGenerator(22, 0, 2^22-1, 0, EpochClock())
        -         
        1         id = next_id(generator)
        1         @test id > 0
        1         @test SnowflakeId.node_id(generator, id) == 2^22-1
        1         @test SnowflakeId.max_node_id(generator) == 2^22-1
        1         @test SnowflakeId.max_sequence(generator) == 0
        -     end
        -     
        0     @testset "Single node bit" begin
        -         # Test with exactly 1 node bit (max node_id = 1)
        2         generator = SnowflakeIdGenerator(1, 21, 1, 0, EpochClock())
        -         
        1         id = next_id(generator)
        1         @test id > 0
        1         @test SnowflakeId.node_id(generator, id) == 1
        1         @test SnowflakeId.max_node_id(generator) == 1
        -     end
        -     
        0     @testset "Single sequence bit" begin
        -         # Test with exactly 1 sequence bit (max sequence = 1)
        2         generator = SnowflakeIdGenerator(21, 1, 100, 0, EpochClock())
        -         
        1         id = next_id(generator)
        1         @test id > 0
        1         @test SnowflakeId.sequence(generator, id) <= 1
        1         @test SnowflakeId.max_sequence(generator) == 1
        -     end
        -     
        0     @testset "Large timestamp offset" begin
        -         # Test with a large timestamp offset (should still work)
        2         large_offset = 1000000000000  # Large but reasonable offset
        1         clock = EpochClock()
        1         current_time = time_millis(clock)
        -         
        1         if large_offset < current_time
        1             generator = SnowflakeIdGenerator(10, 12, 123, large_offset, clock)
        -             
        1             id = next_id(generator)
        1             @test id > 0
        -             
        1             timestamp_part = SnowflakeId.timestamp(generator, id)
        1             @test timestamp_part >= 0
        1             @test timestamp_part == current_time - large_offset
        -         else
        -             # Skip if offset would be in the future
        0             @test_skip "Large offset test skipped - would be in future"
        -         end
        -     end
        -     
        0     @testset "Sequence rollover behavior" begin
        -         # Create generator with small sequence bits to force rollover
        2         generator = SnowflakeIdGenerator(20, 2, 1, 0, EpochClock())  # Only 2 sequence bits = max 3
        -         
        -         # Generate enough IDs to potentially cause sequence rollover
        1         ids = Int64[]
        1         for i in 1:10
       10             push!(ids, next_id(generator))
       19         end
        -         
        -         # All IDs should still be unique
        1         @test length(unique(ids)) == length(ids)
        -         
        -         # All should have correct node ID
        1         for id in ids
       10             @test SnowflakeId.node_id(generator, id) == 1
       10         end
        -     end
        -     
        0     @testset "Clock behavior with different clocks" begin
        -         # Test with EpochClock
        2         generator_epoch = SnowflakeIdGenerator(10, 12, 123, 0, EpochClock())
        1         id_epoch = next_id(generator_epoch)
        1         @test id_epoch > 0
        -         
        -         # Both should produce valid IDs with the same node ID
        1         @test SnowflakeId.node_id(generator_epoch, id_epoch) == 123
        -     end
        -     
        0     @testset "Bit shifting correctness" begin
        -         # Test that bit shifting works correctly for various configurations
        5         test_cases = [
        -             (8, 14, 100),    # 8 node bits, 14 sequence bits
        -             (12, 10, 500),   # 12 node bits, 10 sequence bits
        -             (16, 6, 1000),   # 16 node bits, 6 sequence bits
        -             (4, 18, 15),     # 4 node bits, 18 sequence bits
        -         ]
        -         
        1         for (node_bits, seq_bits, node_id) in test_cases
        4             if node_id <= 2^node_bits - 1  # Ensure node_id is valid
        4                 generator = SnowflakeIdGenerator(node_bits, seq_bits, node_id, 0, EpochClock())
        -                 
        4                 id = next_id(generator)
        4                 @test id > 0
        -                 
        -                 # Verify correct extraction
        4                 extracted_node = SnowflakeId.node_id(generator, id)
        4                 @test extracted_node == node_id
        -                 
        -                 # Verify sequence is within bounds
        4                 seq = SnowflakeId.sequence(generator, id)
        4                 @test seq >= 0
        4                 @test seq <= 2^seq_bits - 1
        -             end
        4         end
        -     end
        -     
        0     @testset "ID structure validation" begin
        2         generator = SnowflakeIdGenerator(10, 12, 123, 0, EpochClock())
        1         id = next_id(generator)
        -         
        -         # An ID should have the structure: [timestamp][node_id][sequence]
        -         # Let's verify the bit layout makes sense
        -         
        1         timestamp_part = SnowflakeId.timestamp(generator, id)
        1         node_part = SnowflakeId.node_id(generator, id)
        1         sequence_part = SnowflakeId.sequence(generator, id)
        -         
        -         # Reconstruct the ID from its parts
        -         # ID = (timestamp << (node_bits + sequence_bits)) | (node_id << sequence_bits) | sequence
        1         node_id_and_sequence_bits = 10 + 12  # 22 bits total
        1         sequence_bits = 12
        -         
        1         reconstructed = (timestamp_part << node_id_and_sequence_bits) | 
        -                        (node_part << sequence_bits) | 
        -                        sequence_part
        -         
        1         @test reconstructed == id
        -     end
        -     
        0     @testset "Large ID values" begin
        -         # Test that large ID values are handled correctly
        2         generator = SnowflakeIdGenerator(123)
        -         
        -         # Generate several IDs and verify they're all reasonable
        1         for _ in 1:50
       50             id = next_id(generator)
       50             @test id > 0
       50             @test id < typemax(Int64)  # Should not overflow
        -             
        -             # Components should be extractable
       50             @test SnowflakeId.node_id(generator, id) == 123
       50             @test SnowflakeId.timestamp(generator, id) >= 0
       50             @test SnowflakeId.sequence(generator, id) >= 0
       99         end
        -     end
        - end

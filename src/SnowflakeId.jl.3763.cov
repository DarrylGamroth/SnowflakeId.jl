        - module SnowflakeId
        - 
        - using Clocks
        - using Hwloc
        - using LibUV_jll
        - 
        - export SnowflakeIdGenerator,
        -     node_id,
        -     timestamp_offset_ms,
        -     max_node_id,
        -     max_sequence,
        -     next_id,
        -     timestamp,
        -     node_id,
        -     sequence
        - 
        - const CACHE_LINE_SIZE::Int = maximum(cachelinesize())
        - const CACHE_LINE_PAD::Int = CACHE_LINE_SIZE - sizeof(Int64)
        - # Number of bits used for the timestamp, allowing for 69 years from `timestamp_offset_ms()`.
        - const EPOCH_BITS::Int = 41
        - # Total number of bits used to represent the distributed node and the sequence within a millisecond.
        - const MAX_NODE_ID_AND_SEQUENCE_BITS::Int = 22
        - # Default number of bits used to represent the distributed node or application, allowing for 1024 nodes (0-1023).
        - const NODE_ID_BITS_DEFAULT::Int = 10
        - # Default number of bits used to represent the sequence within a millisecond, supporting 4,096,000 ids per second per node.
        - const SEQUENCE_BITS_DEFAULT::Int = 12
        - 
        - """
        -     Generate unique identifiers based on the Twitter
        -     [Snowflake](https://github.com/twitter-archive/snowflake/tree/snowflake-2010) algorithm.
        - 
        - This implementation is lock-less resulting in greater throughput plus less contention and latency jitter.
        - 
        - !!! note
        -     ntpd, or alternative clock source, should be setup correctly to ensure the clock does not go backwards.
        - """
        - mutable struct SnowflakeIdGenerator{C<:AbstractClock}
        -     const pad1::NTuple{CACHE_LINE_PAD,Int8}
        -     @atomic timestamp_sequence::Int64
        -     const pad2::NTuple{CACHE_LINE_PAD,Int8}
        -     const node_id_and_sequence_bits::Int32
        -     const sequence_bits::Int32
        -     const max_node_id::Int64
        -     const max_sequence::Int64
        -     const node_bits::Int64
        -     const timestamp_offset_ms::Int64
        -     const clock::C
        - 
       54     function SnowflakeIdGenerator(node_id_bits::Int,
        -         sequence_bits::Int,
        -         node_id::Int64,
        -         timestamp_offset_ms::Int64,
        -         clock::C) where {C<:AbstractClock}
        - 
       54         if node_id_bits < 0
        1             throw(ArgumentError("must be >= 0: node_id_bits=$node_id_bits"))
        -         end
       53         if sequence_bits < 0
        1             throw(ArgumentError("must be >= 0: sequence_bits=$sequence_bits"))
        -         end
        - 
       52         node_id_and_sequence_bits = node_id_bits + sequence_bits
       52         if node_id_and_sequence_bits > MAX_NODE_ID_AND_SEQUENCE_BITS
        1             throw(ArgumentError("too many bits used: node_id_bits=$node_id_bits + sequence_bits=$sequence_bits > $MAX_NODE_ID_AND_SEQUENCE_BITS"))
        -         end
        - 
       51         max_node_id = 2^node_id_bits - 1
      101         if node_id < 0 || node_id > max_node_id
        2             throw(ArgumentError("must be >= 0 && <= $max_node_id: node_id=$node_id"))
        -         end
        - 
       49         if timestamp_offset_ms < 0
        1             throw(ArgumentError("must be >= 0: timestamp_offset_ms=$timestamp_offset_ms"))
        -         end
        - 
       48         now_ms = time_millis(clock)
       48         if timestamp_offset_ms > now_ms
        1             throw(ArgumentError("timestamp_offset_ms=$timestamp_offset_ms > now_ms=$now_ms"))
        -         end
        - 
       47         max_sequence = 2^sequence_bits - 1
       47         node_bits = node_id << sequence_bits
        - 
     2679         new{C}(ntuple(x -> Int8(0), CACHE_LINE_PAD),
        -             0,
     2632             ntuple(x -> Int8(0), CACHE_LINE_PAD),
        -             node_id_and_sequence_bits,
        -             sequence_bits,
        -             max_node_id,
        -             max_sequence,
        -             node_bits,
        -             timestamp_offset_ms,
        -             clock)
        -     end
        - end
        - 
       18 SnowflakeIdGenerator(node_id::Int64) = SnowflakeIdGenerator(NODE_ID_BITS_DEFAULT, SEQUENCE_BITS_DEFAULT, node_id, 0, EpochClock())
        1 SnowflakeIdGenerator(node_id::Int64, clock::AbstractClock) = SnowflakeIdGenerator(NODE_ID_BITS_DEFAULT, SEQUENCE_BITS_DEFAULT, node_id, 0, clock)
        - 
        - """
        -     node_id(g::SnowflakeIdGenerator) -> Int
        - 
        - Returns the node ID of the given `SnowflakeIdGenerator` instance.
        - """
        3 node_id(g::SnowflakeIdGenerator) = g.node_bits >>> g.sequence_bits
        - 
        - """
        -     timestamp_offset_ms(g::SnowflakeIdGenerator) -> Int
        - 
        - Returns the timestamp offset in milliseconds of the given `SnowflakeIdGenerator` instance.
        - """
        3 timestamp_offset_ms(g::SnowflakeIdGenerator) = g.timestamp_offset_ms
        - 
        - """
        -     max_node_id(g::SnowflakeIdGenerator) -> Int
        - 
        - Returns the maximum node ID of the given `SnowflakeIdGenerator` instance.
        - """
        9 max_node_id(g::SnowflakeIdGenerator) = g.max_node_id
        - 
        - """
        -     max_sequence(g::SnowflakeIdGenerator) -> Int
        - 
        - Returns the maximum sequence number of the given `SnowflakeIdGenerator` instance.
        - """
       22 max_sequence(g::SnowflakeIdGenerator) = g.max_sequence
        - 
        - """
        -     next_id(g::SnowflakeIdGenerator) -> Int
        - 
        - Generate the next id in sequence. If `maxSequence()` is reached within the same millisecond,
        - this implementation will busy spin until the next millisecond.
        - 
        - # Arguments
        - - `g::SnowflakeIdGenerator`: The generator instance.
        - 
        - # Returns
        - - The next unique id for this node.
        - """
     5299 function next_id(g::SnowflakeIdGenerator)
   527344     while true
   527344         old_timestamp_sequence = @atomic g.timestamp_sequence
   527344         timestamp_ms = time_millis(g.clock) - g.timestamp_offset_ms
   527344         old_timestamp_ms = old_timestamp_sequence >>> g.node_id_and_sequence_bits
        - 
   527344         if timestamp_ms > old_timestamp_ms
       68             new_timestamp_sequence = timestamp_ms << g.node_id_and_sequence_bits
       68             (_, success) = @atomicreplace g.timestamp_sequence old_timestamp_sequence => new_timestamp_sequence
       68             if success
       68                 return new_timestamp_sequence | g.node_bits
        -             end
        -         else
   527276             old_sequence = old_timestamp_sequence & g.max_sequence
   527276             if old_sequence < g.max_sequence
     5231                 new_timestamp_sequence = old_timestamp_sequence + 1
     5231                 (_, success) = @atomicreplace g.timestamp_sequence old_timestamp_sequence => new_timestamp_sequence
     5231                 if success
     5231                     return new_timestamp_sequence | g.node_bits
        -                 end
        -             end
        -         end
   522045         ccall(:jl_cpu_pause, Cvoid, ())
   522045     end
        - end
        - 
        - """
        -     timestamp(g::SnowflakeIdGenerator, id::Int64) -> Int
        - Returns the timestamp in milliseconds of the given `SnowflakeIdGenerator` instance for the provided id.
        - # Arguments
        - - `g::SnowflakeIdGenerator`: The generator instance.
        - - `id::Int64`: The unique identifier generated by the Snowflake algorithm.
        - # Returns
        - - The timestamp in milliseconds since the epoch for the given id.
        - """
     1066 timestamp(g::SnowflakeIdGenerator, id::Int64) = id >>> g.node_id_and_sequence_bits
        - 
        - """
        -     node_id(g::SnowflakeIdGenerator, id::Int64) -> Int64
        - Returns the node ID of the given `SnowflakeIdGenerator` instance for the provided id.
        - # Arguments
        - - `g::SnowflakeIdGenerator`: The generator instance.
        - - `id::Int64`: The unique identifier generated by the Snowflake algorithm.
        - # Returns
        - - The node ID associated with the given id.
        - """
     3191 node_id(g::SnowflakeIdGenerator, id::Int64) = (id >>> g.sequence_bits) & g.max_node_id
        - 
        - """
        -     sequence(g::SnowflakeIdGenerator, id::Int64) -> Int64
        - Returns the sequence number of the given `SnowflakeIdGenerator` instance for the provided id.
        - # Arguments
        - - `g::SnowflakeIdGenerator`: The generator instance.
        - - `id::Int64`: The unique identifier generated by the Snowflake algorithm.
        - # Returns
        - - The sequence number associated with the given id, masked to the maximum sequence value.
        - """
     1172 sequence(g::SnowflakeIdGenerator, id::Int64) = id & g.max_sequence
        - 
        - end # module SnowflakeId
